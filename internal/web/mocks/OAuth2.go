// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	auth "github.com/swpoolcontroller/pkg/auth"

	mock "github.com/stretchr/testify/mock"
)

// OAuth2 is an autogenerated mock type for the OAuth2 type
type OAuth2 struct {
	mock.Mock
}

// RevokeToken provides a mock function with given fields: params
func (_m *OAuth2) RevokeToken(params auth.OA2RevokeTokenInput) error {
	ret := _m.Called(params)

	var r0 error
	if rf, ok := ret.Get(0).(func(auth.OA2RevokeTokenInput) error); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Token provides a mock function with given fields: params
func (_m *OAuth2) Token(params auth.OA2TokenInput) (*jwt.Token, error) {
	ret := _m.Called(params)

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(auth.OA2TokenInput) *jwt.Token); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(auth.OA2TokenInput) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOAuth2 interface {
	mock.TestingT
	Cleanup(func())
}

// NewOAuth2 creates a new instance of OAuth2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOAuth2(t mockConstructorTestingTNewOAuth2) *OAuth2 {
	mock := &OAuth2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
